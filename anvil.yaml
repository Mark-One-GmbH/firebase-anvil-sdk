dependencies: []
services:
- source: /runtime/services/tables.yml
  client_config: {enable_v2: true}
  server_config: {}
startup: {type: module, module: readme}
package_name: firebase
allow_embedding: false
name: Firebase Anvil SDK
runtime_options: {version: 2, client_version: '3', server_version: python3-full, server_spec: null,
  server_persist: true}
metadata: {title: Firebase Anvil SDK, description: Firebase Anvil SDK}
startup_form: null
native_deps: {head_html: "<script>\n\nfunction addDoc(fs,collection,data){fs.addDoc(collection,data)}\n\
    function setDoc(fs,doc_ref,data,merge) {fs.setDoc(doc_ref,data,{'merge':merge})}\n\
    function updateDoc(fs,doc_ref,data) {fs.updateDoc(doc_ref,data)}\nfunction deleteDoc(fs,doc_ref)\
    \ {fs.deleteDoc(doc_ref)}\nasync function batch_commit(fs,error_callback,error_callback_metadata)\
    \ {\n  try {\n    await fs.commit()\n  } catch (error) {\n    console.log('error\
    \ commiting firestore batch')\n    console.log(error)\n    error_callback([error,error_callback_metadata])\n\
    \  }\n}\nfunction enableIndexedDbPersistence (fs,db) {fs.enableIndexedDbPersistence(db)}\n\
    function enableMultiTabIndexedDbPersistence (fs,db) {fs.enableMultiTabIndexedDbPersistence(db)}\n\
    \nfunction getDocsAsync(fs,query,_get_docs_callback,callback_func) {\n  fs.getDocs(query).then((querySnapshot)\
    \ => {\n    _get_docs_callback(querySnapshot,callback_func);\n  })\n}\n\nfunction\
    \ callV2Async(cloudFunction,parameters,_call_v2_callback,callback_func,error_callback_func)\
    \ {\n  cloudFunction(parameters).then((result) => {\n    _call_v2_callback(result.data,callback_func);\n\
    \  }).catch((e) => {\n    _call_v2_callback(e,error_callback_func);\n  })\n}\n\
    \n  \n</script>"}
db_schema: {}
